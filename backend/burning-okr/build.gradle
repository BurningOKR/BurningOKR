buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
//        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.27.1'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:3.0.2")
        classpath 'io.freefair.gradle:lombok-plugin:6.6.2'
    }

}

subprojects {
    apply plugin: 'java'
    /*apply plugin: 'checkstyle'*/ // TODO enable again?
//    apply plugin: 'com.diffplug.gradle.spotless'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'io.freefair.lombok'

    sourceCompatibility = 17
    targetCompatibility = 17

    repositories {
        mavenCentral()
    }

    dependencies {

        // TODO look if needed after spring update (fixes Missing Annotation Warning)
        implementation 'com.google.code.findbugs:jsr305:3.0.2'

        // Spring dependency resolution
        implementation platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)

        implementation deps.spring.context
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.security:spring-security-web'
        implementation 'io.jsonwebtoken:jjwt:0.2'
        implementation 'net.sf.ehcache:ehcache-core:2.6.11'
        implementation 'org.springframework.security:spring-security-acl'
        implementation 'org.springframework:spring-context-support'
        implementation 'jakarta.mail:jakarta.mail-api:2.1.1'

        implementation 'com.auth0:java-jwt:3.4.0'
        implementation 'com.auth0:auth0-spring-security-api:1.2.6'

        // Logging
        implementation 'org.springframework.boot:spring-boot-starter-log4j2'
        modules {
            module("org.springframework.boot:spring-boot-starter-logging") {
                replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
            }
        }

        implementation 'javax.xml.bind:jaxb-api:2.3.0'
        implementation 'javax.validation:validation-api:2.0.1.Final' // TODO check if removable
        implementation 'org.springframework.boot:spring-boot-starter-websocket'
        implementation 'org.webjars:stomp-websocket:2.3.3-1'
        implementation 'org.springframework:spring-messaging'
        implementation 'org.springframework.security:spring-security-messaging'


        implementation 'org.webjars:sockjs-client:1.1.2'

        implementation 'com.google.code.gson:gson:2.8.5'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        testImplementation "org.springframework.boot:spring-boot-starter-test"
    }

    test {
        //useJUnitPlatform()
    }

    /*checkstyle {
        toolVersion '8.29' // TODO enable again?
    }*/

    /*spotless {
        format 'misc', {
            target '**\/*.gradle', '**\/.*.md', '**\/.gitignore'

            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
            setLineEndings("UNIX")
        }
        java {
            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
            setLineEndings("UNIX")
        }
    }*/

    // unifies and Configures the Versions of Dependencies in all Sub
    configurations.configureEach {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.springframework.boot') {
                details.useVersion '3.0.2'
            }
            if (details.requested.group == 'org.springframework') {
                details.useVersion '6.0.4'
            }
            if (details.requested.group == 'org.springframework.security') {
                details.useVersion '6.0.2'
            }
            if (details.requested.group == 'org.springframework.security' && details.requested.name == 'spring-security-jwt') {
                details.useVersion '1.1.1.RELEASE'
            }
            if (details.requested.group == 'org.springframework.security.oauth.boot') {
                details.useVersion '2.6.8'
            }
        }
    }
    // shows more information about violations
    tasks.withType(JavaCompile).tap {
        configureEach {
            options.compilerArgs += ['-Xlint:deprecation']
            options.compilerArgs += ['-Xlint:unchecked']
        }
    }

    tasks.withType(Copy).configureEach { duplicatesStrategy 'exclude' }
}

/* tasks.register('testReport', TestReport) {
    // destinationDir = file("$buildDir/reports/allTests")
    // reportOn subprojects*.test
} */
