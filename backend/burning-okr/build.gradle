buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath(deps.lombok.plugin)
        classpath(deps.spring.boot.plugin)
//        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.27.1'
    }
}

subprojects {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
//    apply plugin: 'com.diffplug.gradle.spotless'

    sourceCompatibility = 17
    targetCompatibility = 17

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation deps.spring.framework.springContext
        testImplementation deps.spring.boot.starter.test
    }

    test {
        useJUnitPlatform() // TODO enable again
        testLogging {
            afterSuite { descriptor, result ->
                if (!descriptor.parent) {
                    def displayWidth = 36
                    def leftBoundFirst = '|  '
                    def leftBound = '|   > '
                    def rightBound = '|'

                    def res = "${result.resultType}"
                    def run = leftBoundFirst + "TOTAL TESTS RUN: ${result.testCount}"
                    def passed = leftBound + "Passed:  ${result.successfulTestCount}"
                    def failed = leftBound + "Failed:  ${result.failedTestCount}"
                    def skipped = leftBound + "Skipped: ${result.skippedTestCount}"

                    def header = '=' * (displayWidth/2 - res.length()/2 - 1) + ' ' + res + ' ' + ('=' * (displayWidth/2 - res.length()/2 - 1))

                    println('\n' + header)
                    println(run + " " * (header.length() - run.length() - 1) + rightBound)
                    println(passed + " " * (header.length() - passed.length() - 1) + rightBound)
                    println(failed + " " * (header.length() - failed.length() - 1) + rightBound)
                    println(skipped + " " * (header.length() - skipped.length() - 1) + rightBound)
                    println('=' * header.length())
                }
            }
        }
    }

    // shows more information about violations (C.K.: keep for more insights!)
    tasks.withType(JavaCompile).tap {
        configureEach {
            options.compilerArgs += ['-Xlint:deprecation']
            options.compilerArgs += ['-Xlint:unchecked']
        }
    }

    /*checkstyle {
        toolVersion '8.29' // TODO enable again?
    }*/

    /*spotless {
        format 'misc', {
            target '**\/*.gradle', '**\/.*.md', '**\/.gitignore'

            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
            setLineEndings("UNIX")
        }
        java {
            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
            setLineEndings("UNIX")
        }
    }*/
}
