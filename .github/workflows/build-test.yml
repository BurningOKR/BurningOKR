name: Build and Test

on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development, master ]
  workflow_dispatch:

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: {{ steps.read-version.outputs.version }}

    steps:
    - uses: actions/checkout@v2
    - name: Read package version
      id: read-version
      run: head -n 1 version.txt || PACKAGE_VERSION=$(sed 's/\d+.\d+.\d+//') && echo ::set-output name=version::$PACKAGE_VERSION

  test-backend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Add execution privileges
      run: chmod +x ./gradlew
      working-directory: ./backend/burning-okr
    - name: Test Backend
      run: ./gradlew test

  lint-backend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Add execution privileges
      run: chmod +x ./gradlew
      working-directory: ./backend/burning-okr
    - name: Lint Backend
      run: ./gradlew spotlessCheck

  build-backend:
    needs: [get-version]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Add execution privileges
      run: chmod +x ./gradlew
      working-directory: ./backend/burning-okr
    - name: Build Backend .jar
      run: ./gradlew -PprojVersion="${{ needs.get-version.outputs.version }}" bootJar
      working-directory: ./backend/burning-okr
    - name: Build Backend .war
      run: ./gradlew -PprojVersion="${{ needs.get-version.outputs.version }}" bootWar
      working-directory: ./backend/burning-okr

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Npm Setup
      uses: actions/setup-node@v1
      with:
        node-version: '16.x'
    - name: Npm Install
      run: npm install
      working-directory: ./frontend
    - name: Test frontend
      run: npm test
      working-directory: ./frontend

  lint-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Npm Setup
      uses: actions/setup-node@v1
      with:
        node-version: '16.x'
    - name: Npm Install
      run: npm install
      working-directory: ./frontend
    - name: Test frontend
      run: npm run lint
      working-directory: ./frontend

  build-frontend:
    needs: [get-version]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Npm Setup
      uses: actions/setup-node@v1
      with:
        node-version: '16.x'
    - name: Npm Install
      run: npm install
      working-directory: ./frontend
    - name: Test frontend
      run: npm test
      working-directory: ./frontend
    - name: Set Frontend Version
      run: npm version ${{ needs.get-version.outputs.version }} --allow-same-version
      working-directory: ./frontend
    - name: Build Frontend
      run: npm run build-prod-new
      working-directory: ./frontend

  build-demo-frontend:
    needs: [get-version]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Npm Setup
      uses: actions/setup-node@v1
      with:
        node-version: '16.x'
    - name: Npm Install
      run: npm install
      working-directory: ./frontend
    - name: Test frontend
      run: npm test
      working-directory: ./frontend
    - name: Set Frontend Version
      run: npm version ${{ needs.get-version.outputs.version }} --allow-same-version
      working-directory: ./frontend
    - name: Build Frontend
      run: npm run build-demo
      working-directory: ./frontend
